// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Data.Models;

public partial class admin123Context : DbContext
{
    public admin123Context()
    {
    }

    public admin123Context(DbContextOptions<admin123Context> options)
        : base(options)
    {
    }

    public virtual DbSet<PasswordTask> PasswordTasks { get; set; }

    public virtual DbSet<StockDatum> StockData { get; set; }

    public virtual DbSet<Task> Tasks { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserPassword> UserPasswords { get; set; }

    public virtual DbSet<UserStock> UserStocks { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseNpgsql("Host=localhost;Database=admin123;Username=admin123;Password=kadircanborasemih;Persist Security Info=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<PasswordTask>(entity =>
        {
            entity.HasKey(e => e.PasswordTaskId).HasName("password_task_pkey");

            entity.ToTable("password_task", "C#DB");

            entity.Property(e => e.PasswordTaskId).HasColumnName("password_task_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.DefaultMessage).HasColumnName("default_message");
            entity.Property(e => e.ReminderInterval).HasColumnName("reminder_interval");
            entity.Property(e => e.TaskId).HasColumnName("task_id");

            entity.HasOne(d => d.Task).WithMany(p => p.PasswordTasks)
                .HasForeignKey(d => d.TaskId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("password_task_task_id_fkey");
        });

        modelBuilder.Entity<StockDatum>(entity =>
        {
            entity.HasKey(e => e.StockId).HasName("stock_data_fetch_task_pkey");

            entity.ToTable("Stock_Data", "C#DB");

            entity.Property(e => e.StockId)
                .HasDefaultValueSql("nextval('\"C#DB\".stock_data_fetch_task_stock_task_id_seq'::regclass)")
                .HasColumnName("stock_id");
            entity.Property(e => e.DataType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("data_type");
            entity.Property(e => e.FetchInterval).HasColumnName("fetch_interval");
            entity.Property(e => e.LastFetched)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_fetched");
            entity.Property(e => e.StockSymbol)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("stock_symbol");
            entity.Property(e => e.TaskId).HasColumnName("task_id");

            entity.HasOne(d => d.Task).WithMany(p => p.StockData)
                .HasForeignKey(d => d.TaskId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("stock_data_fetch_task_task_id_fkey");
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasKey(e => e.TaskId).HasName("Task_pkey");

            entity.ToTable("Task", "C#DB");

            entity.Property(e => e.TaskId).HasColumnName("task_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.ScheduleInterval).HasColumnName("schedule_interval");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Userid).HasName("users_pkey");

            entity.ToTable("users", "C#DB");

            entity.HasIndex(e => e.Email, "users_email_key").IsUnique();

            entity.Property(e => e.Userid).HasColumnName("userid");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("role");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<UserPassword>(entity =>
        {
            entity.HasKey(e => e.UserPasswordId).HasName("user_password_pkey");

            entity.ToTable("user_password", "C#DB");

            entity.Property(e => e.UserPasswordId).HasColumnName("user_password_id");
            entity.Property(e => e.PasswordId).HasColumnName("password_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Password).WithMany(p => p.UserPasswords)
                .HasForeignKey(d => d.PasswordId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_password_password_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.UserPasswords)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_password_user_id_fkey");
        });

        modelBuilder.Entity<UserStock>(entity =>
        {
            entity.HasKey(e => e.UserStockId).HasName("user_stock_pkey");

            entity.ToTable("user_stock", "C#DB");

            entity.Property(e => e.UserStockId).HasColumnName("user_stock_id");
            entity.Property(e => e.StockId).HasColumnName("stock_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Stock).WithMany(p => p.UserStocks)
                .HasForeignKey(d => d.StockId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_stock_stock_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.UserStocks)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_stock_user_id_fkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}